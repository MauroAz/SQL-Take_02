{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue10;}
{\*\expandedcolortbl;;\cssrgb\c99942\c98555\c0;}
\margl1440\margr1440\vieww12980\viewh13280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 -- SEE HOW MANY YOU CAN GET THROUGH BY 10am :) \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb2 -- What's the title and ID of the longest film?\cb1 \
	select film_id, title, length\
	from film\
	order by length DESC;\
\
\cb2 -- BONUS points if you use a subquery :) \cb1 \
	SELECT film_id, title, length\
	FROM film\
	WHERE length =\
	(SELECT MAX(length) from film)\
	ORDER BY length DESC;\
\
\'97\'97\'97\'97\'97> The answer to questions above is not just one movie?\
 There ate 10 movies with the \'93longest length\'94  which is 185 minutes. \
\
\
\
\cb2 -- What is the title and ID of the film with the lowest replacement cost?\cb1 \
	select film_id, title, replacement_cost\
	from film\
	order by replacement_cost ASC;\
\
\cb2 -- BONUS points if you use a subquery :) \cb1 \
	SELECT film_id, title, replacement_cost\
	FROM film\
	WHERE replacement_cost =\
	(SELECT MIN(replacement_cost) from film)\
	ORDER BY replacement_cost;\
\
\'97\'97\'97\'97\'97> The answer to questions above is not just one movie?\
 There ate 41 movies with the \'93lowest replacement_cost\'94  which is $9.99.\
\
\
\cb2 -- What is the tile and ID of the film with the highest rental_rate?\cb1 \
	SELECT film_id, title, rental_rate \
	FROM film\
	WHERE rental_rate = 4.99;\
\
\cb2 Now with a sub-query\cb1 \
	SELECT film_id, title, rental_rate \
	FROM film\
	WHERE rental_rate = \
		(SELECT MAX(rental_rate) FROM film);\
\
\
\cb2 Now also in alphabetical order\cb1 \
	SELECT film_id, title, rental_rate \
	FROM film\
	WHERE rental_rate = \
	(SELECT MAX(rental_rate) FROM film)\
	ORDER BY title ASC;\
\
\
\cb2 -- Show the payment_id's of all transactions after or on May 1st 2007\cb1 \
	SELECT payment_id\
	FROM payment\
	WHERE payment_date >= '2007-05-01';\
		Correct!!!\
\
\
\cb2 -- Show all payment ID's and payment date's with a transaction amount less than $3.\cb1 \
	SELECT payment_id\
	FROM payment\
	WHERE amount < '3';\
\
\
\cb2 -- Get the emails of all customers that shop at store 1 that are inactive (use 'active')\cb1 \
	SELECT first_name ||' '|| last_name AS name , email, active\
	FROM customer AS c\
	JOIN store AS s\
	ON s.store_id = c.store_id\
	WHERE s.store_id = 1 AND c.active = 0;\
\
\
\
\
\
\
\cb2 --How much have these customers spent? (Use code from the previous query to\
-- make a subquery or a CTE to solve this one.) \cb1 \
\
\
\cb2 SUBquery way -->\cb1 \
	SELECT SUM(amount), p.customer_id\
	FROM payment AS p\
	JOIN customer AS c\
	ON c.customer_id = p.customer_id\
	WHERE c.customer_id IN \
		(SELECT c.customer_id\
		FROM customer AS c\
		JOIN store AS s\
		ON s.store_id = c.store_id\
	WHERE s.store_id = 1 AND c.active = 0)\
	GROUP BY p.customer_id\
	ORDER BY p.customer_id ASC;\
\
\
\cb2 CTE = Common Table Expression \'97>\cb1 \
	WITH inactive_customers AS\
	(SELECT c.customer_id, first_name ||' '|| last_name AS name , email, active\
	FROM customer AS c\
	JOIN store AS s\
	ON s.store_id = c.store_id\
	WHERE s.store_id = 1 AND c.active = 0) \
\
	SELECT SUM(amount), p.customer_id\
	FROM payment AS p\
	JOIN customer AS c\
	ON c.customer_id = p.customer_id\
	WHERE c.customer_id IN (SELECT customer_id FROM inactive_customers)\
	GROUP BY p.customer_id\
	ORDER BY p.customer_id\
\
\
\
\
\
\
}